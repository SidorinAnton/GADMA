#	It is parameters file for GADMA software.

#	Lines started from # are ignored.
#	Also comments at the end of a line are ignored too.
#	Every line contains: Identificator of parameter : value.
#	If you want to change some default parameters, you need to remove # at the begining of line and change corresponding parameter.


#	Output directory to write all GADMA out.
#	You need to set it to not existing or empty directory.
#	If you resume from other directory and doesn't set output directory,
#	GADMA will add '_resumed' for previous output directory.
Output directory : {0}


#	You can resume from some other launch of gadma, so you need to set output directory of it to Resume from parameter.
#	You can set again new parameters of resumed launch.
#	Default: None
Resume from : {1}

#	If you want to take only models from previous run set this flag. 
#	Then iterations of GA will start from 0 and values of mutation rate and strength will be initial.
#	Default: None
Only models : {2}


#	Input file can be sfs file (should end with .fs) or file of SNP's in dadi format (should end with .txt).
Input file : {3}

#	Population labels is sequence of population names (the same names as in input file)
#	If .fs file is in old format then it would rename population labels that are abcent.
#	It is nessesary to put them in order from most ancient to less. (It is important in case of more than two populations)
#	It is important, because the last of formed populations take part in next split.
#	For example, if we have YRI - African population, CEU - European population and CHB - Chineese populaion,
#	then we can write YRI, CEU, CHB or YRI, CHB, CEU (YRI must be at the first place)
#	Default: from input file
Population labels : {4}

#	Also you can project your spectrum for less size.
#	For example, you have 80 individuals in each of three populations, then spectrum will be 81x81x81 and
#	you can project it to 21x21x21 by set Projections parameter to 20, 20, 20.
#	Default: from input file
Projections : {5}




#	Now all main parameters:
#
#	Scaled mutation rate, equal to theta0 = 4 * μ * L.
#	
#	(In Gutenkunst et al theta0 = 4 * N_ref * u, where u (= μ * L) is the mutation event rate per generation for the simulated locus.
#	However, we can consider N_ref = 1 and get formula above.)
#	
#	μ - mutation rate per site per generation
#	L - effective sequenced length, which accounts for losses in alignment and missed calls.
#	Note: you should estimate μ based on generation time.
#	Default: 1.0
Theta0 : {6}

#	Time (number of years) for one generation. Can be float. For human it can be (Gutenkunst et al, 2009):
#	Is important for drawing models. If you don't want to draw, you can pass it.
#	Default: 1.0
Time for generation : {7}


#	Parameters for demographic models:
#
#	Use moments or dadi
#	Default: dadi
Use moments or dadi : {8}

#	Use multinom cheme: N_A is not parameter for search, it is calculated through optimal_sfs_scaling.
#	Multinom cheme decrease number of parameter by one and is usually faster, however non multinom cheme 
#	usually finds better solutions.
#	Default: False
Multinom : {9}

#	Use sudden changes of population sizes only. Decreases the number of parameters.
Only sudden : {32}

#	If you choose to use dadi, please set pts parameter - number of points in grid
#	Default: Let n = max number of individuals in one population, then pts = n, n+10, n+20
Pts : {10}

#	Sructure of model for one population - number of time periods (e.g. 5).
#	Sructure of model for two populations - number of time periods before split of ancestral population and after it (e.g. 2,2).
#	Sructure of model for three populations - number of time periods before first split, between first and second splits and after second split (e.g. 2,1,2).
#
#	Sructure of initial model:
#	Default: all 1s - 1 or 1,1 or 1,1,1
Initial structure : {11}

#	Structure of final model:
#	Default: equals to initial structure
Final structure : {12}

#	It is possible to limit time of splits.
#	Split 1 is the most ancient split.
#	!Note that time is in genetic units (2 * time for 1 generation):
#	e.g. you want to limit by 150 kya, time for one generation is 25 years, then 
#	bound will be 150000 / (2*25) = 3000.
#
#	Upper bound for split 1 (in case of 2 or 3 populations).
#	Default: None
Upper bound of first split : {13}

#	Upper bound for split 2 (in case of 3 populations).
#	Default: None
Upper bound of second split : {14}

#	Print parameters of model in units of N_ref = N_A.
#	N_A will be placed in brackets at the end of string.
#	Default: False
Relative parameters : {15}

#	Disable migrations in demographic models.
#	Default: False
No migrations : {16}




#	Parameters for Genetic Algorithm.
#
#	Size of population of demographic models in GA:
#	Default: 10
Size of population in GA : {17}

#	Fractions of current models, mutated models and crossed models to be taken to new population.
#	Sum of fractions should be <= 1, the remaining fraction is fraction of random models.
#	Default: 0.2,0.3,0.3
Fractions in GA : {18}

#	Mutation strength - fraction of parameters in model to mutate during global mutation process of model.
#	Number of parameters to mutate is sampled from binomial distribution, so we need to set mean.
#	Default: 0.2
Mean mutation strength : {19}
#
#	Mutation strength can be adaptive: if mutation is good, i.e. has the best fitness function (log likelihood),
#	then mutation strength is increased multiplying by const otherwise it decreases dividing by (1/4)^const.
#	When const is 1.0 it is not adaptive.
#	Default: 1.0
Const for mutation strength : {20}

#	Mutation rate - fraction of any parameter to change during its mutation.
#	Mutation rate is sampled from truncated normal disstribution, so we need mean (std in extra param).
#	Default 0.2
Mean mutation rate : {21}
#
#	Mutation rate also can be adaptive as mutation strength.
#	Default: 1.02
Const for mutation rate : {22}

#	Genetic algorithm stops when it couldn't improve model more that epsilon
#	Default: 1e-2
Epsilon : {23}
#	
#	and it happens during N iterations:
#	Default: 100
Stop iteration : {24}


#	Local optimization.
#
#	Choice of local optimization, that is launched after each genetic algorithm.
#	Choices:
#
#	*	optimize (BFGS method)
#	
#	*	optimiza_log (BFGS method)
#	
#	*	optimize_powell (Powell’s conjugate direction method)
#	(Note: is implemented in moments: you need to have moments installed.)
#
#	(If your optimizations are often hitting the parameter bounds, try using these methods:)
#	*	optimize_lbfgsb
#	*	optimize_log_lbfgsb 
#	(Note that it is probably best to start with the vanilla BFGS methods, because 
#	the L-BFGS-B methods will always try parameter values at the bounds during the search. 
#	This can dramatically slow model fitting.)
#
#	*	optimize_log_fmin (simplex (a.k.a. amoeba) method)
#	
#	*	hill_climbing
#	
#	Default: optimize_powell
Name of local optimization : {25}



#	Parameters of pipeline
#
#	You can automatically draw models every N iteration. If 0 then never.
#	Pictures are saved in GA's directory in picture folder.
#	Default: 0
Draw models every N iteration : {26}

#	You can automatically generate dadi and moments code for models.
#	If 0 then only current best model will be printed in GA's working directory.
#	Also result model will be saved there. 
#	If specified (not 0) then every N iteration model will be saved in python code folder.
#	Default: 0
Print models' code every N iteration : {27}

#	You can choose time units in models' plots: years or thousand years (kya, KYA).
#	If time for one generation isn't specified then time is in genetic units.
#	Default: years
Units of time in drawing : {28}

#	No std output.
#	Default: False
Silence : {29}

#	How many times launch gadma with this parameters.
#	Default: 1
Number of repeats : {30}

#	How many processes to use for this repeats.
#	Note that one repeat isn't parallelized, so increasing number of processes
#	doesn't effect on time of one repeat.
#	It is desirable that the number of repeats is a multiple of the number of processes.
#	Default: 1
Number of processes : {31}
